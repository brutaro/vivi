#!/usr/bin/env python3
"""
Frontend FastAPI para o Agente RAG Vivi IA
Interface web para consultas sobre SIAPE e gest√£o p√∫blica
"""

import os
import sys
import json
from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from dotenv import load_dotenv

# Adicionar o diret√≥rio pai ao path para importar o agente
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from agente_busca_gemini import AgenteBuscaGemini

# Carregar vari√°veis de ambiente
load_dotenv()

app = FastAPI(title="Vivi IA - Agente RAG", version="1.0.0")

# Configurar templates e arquivos est√°ticos
templates = Jinja2Templates(directory=os.path.join(os.path.dirname(__file__), "templates"))
app.mount("/static", StaticFiles(directory=os.path.join(os.path.dirname(__file__), "static")), name="static")

# Inicializar o agente
agente = None

class PerguntaRequest(BaseModel):
    pergunta: str

def get_agente():
    """Inicializa e retorna o agente RAG"""
    global agente
    if agente is None:
        try:
            agente = AgenteBuscaGemini()
            print("ü§ñ Agente RAG inicializado com sucesso!")
        except Exception as e:
            print(f"‚ùå Erro ao inicializar agente: {e}")
            return None
    return agente

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    """P√°gina principal do frontend"""
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/api/health")
async def health_check():
    """Verifica√ß√£o de sa√∫de da API"""
    try:
        agente = get_agente()
        if agente:
            return {
                'status': 'healthy',
                'message': 'Agente RAG funcionando normalmente',
                'agent_type': 'AgenteBuscaGemini'
            }
        else:
            raise HTTPException(status_code=500, detail='Agente RAG n√£o p√¥de ser inicializado')
    except Exception as e:
        raise HTTPException(status_code=500, detail=f'Erro na verifica√ß√£o de sa√∫de: {str(e)}')

@app.post("/api/buscar")
async def buscar(request: PerguntaRequest):
    """API para executar buscas no agente RAG"""
    try:
        pergunta = request.pergunta.strip()
        
        if not pergunta:
            raise HTTPException(status_code=400, detail='Pergunta n√£o pode estar vazia')
        
        # Obter agente
        agente = get_agente()
        if not agente:
            raise HTTPException(status_code=500, detail='Erro ao inicializar agente RAG')
        
        print(f"üîç Processando pergunta: {pergunta}")
        
        # Executar busca
        resposta = agente.executar_busca_completa(pergunta)

        return {
            'success': True,
            'resposta': resposta,
            'pergunta': pergunta
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Erro na busca: {e}")
        raise HTTPException(status_code=500, detail=f'Erro interno: {str(e)}')

if __name__ == "__main__":
    print("üöÄ Iniciando servidor FastAPI para frontend do Agente RAG...")
    print("üåê Acesse: http://localhost:5001")
    
    # Verificar se o agente pode ser inicializado
    if get_agente():
        print("‚úÖ Agente RAG pronto!")
    else:
        print("‚ö†Ô∏è Agente RAG com problemas de inicializa√ß√£o")
    
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5001)
